Index: REG001/REG001.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework.response import Response\r\nfrom rest_framework.decorators import api_view\r\nfrom rest_framework import status\r\nfrom .serializers import *\r\nfrom user.models import *\r\nfrom user.serializers import CountryCodeSerializer, UserSerializer, UserAppSerializer\r\nfrom datetime import datetime\r\n\r\nfrom .REG007SENDVERCODE import REG007SENDVERCODE\r\nfrom .REG008CHECKVERCODE import REG008CHECKVERCODE\r\nfrom .REG002PSWMNG import REG002PSWMNG\r\n\r\nfrom .REG011IDCREATION import REG011IDCREATION\r\nfrom .REG012CHKPROMO import REG012CHKPROMO\r\n\r\nfrom CMTY.CMTY001 import CMTY001\r\nfrom CMTY.CMTY001 import PROCSAMECOUNTRY, PROCDIFFCOUNTRIES\r\n\r\n\r\ncommunity_base = \"community\"\r\n#community_base = \"community_test\"\r\n\r\n# TODO:UPPERSTRING FOR ALL THE STRING INPUTS\r\n# TODO: REG007SENDVERCODE PHONEPREFIX\r\n\r\n\r\n@api_view(['POST'])\r\ndef mainService(request):\r\n    baseSerializer = BaseRequestSerializer(data=request.data)\r\n\r\n    if baseSerializer.is_valid():\r\n        if baseSerializer.data[\"callType\"] == 1:\r\n            return serviceOne(request)\r\n        elif baseSerializer.data[\"callType\"] == 2:\r\n            return serviceTwo(request)\r\n        elif baseSerializer.data[\"callType\"] == 3:\r\n            return serviceThree(request)\r\n        elif baseSerializer.data[\"callType\"] == 4:\r\n            return serviceFour(request)\r\n        elif baseSerializer.data[\"callType\"] == 5:\r\n            return serviceFive(request)\r\n        elif baseSerializer.data[\"callType\"] == 6:\r\n            return serviceSix(request)\r\n    else:\r\n        return Response({\"errId\": errorCodes[\"errorCode\"], \"errMessage\": errorCodes[\"description\"]}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\ndef serviceOne(request):\r\n    serviceOneSerializer = ServiceOneSerializer(data=request.data)\r\n    err = errorCodes.error_codes\r\n    if serviceOneSerializer.is_valid() == False:\r\n        return Response({\"errId\": 2, \"errMessage\": err[1], \"RC\": 99, \"err\": serviceOneSerializer.errors}, status=status.HTTP_400_BAD_REQUEST)\r\n    if UserModel.objects.filter(user_Mail=serviceOneSerializer.data[\"userMail\"]).exists() == True:\r\n        if serviceOneSerializer.data[\"userMail\"] == UserModel.objects.get(user_Mail=serviceOneSerializer.data[\"userMail\"]).user_Mail:\r\n            dbModel = UserModel.objects.get(\r\n                user_Mail=serviceOneSerializer.data[\"userMail\"])\r\n            if dbModel.user_Status >= 4:\r\n                return Response({\"errId\": 3, \"errMessage\": err[2], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n            elif dbModel.user_Status < 4:\r\n                return Response({\"errId\": 4, \"errMessage\": err[3], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n    # CHANGE AFTER THAT CAUSE WE DONT HAVE THAT YET BUT ITS GOING TO BE A DROPDOWN\r\n    if CountryModel.objects.filter(value=serviceOneSerializer.data[\"userCountryCode\"]).exists() == True:\r\n        return Response({\"errId\": 5, \"errMessage\": err[4], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n    if UserModel.objects.filter(user_PresenterID=serviceOneSerializer.data[\"userPresenterID\"]).exists() == True:\r\n        if int(serviceOneSerializer.data[\"userPresenterID\"]) == UserModel.objects.get(user_Prog=serviceOneSerializer.data[\"userPresenterID\"]).user_Prog and UserModel.objects.get(user_Prog=serviceOneSerializer.data[\"userPresenterID\"]).user_Status < 5:\r\n            return Response({\"errId\": 6, \"errMessage\": err[5], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    try:\r\n        UserModel.objects.create(\r\n            user_Mail=serviceOneSerializer.data[\"userMail\"],\r\n            user_CountryCode=serviceOneSerializer.data[\"userCountryCode\"],\r\n            user_Language=serviceOneSerializer.data[\"userLanguage\"],\r\n            user_PresenterID=serviceOneSerializer.data[\"userPresenterID\"],\r\n            user_Type=serviceOneSerializer.data[\"userType\"],\r\n            user_phonePrefix=CountryModel.objects.using(\"db999\").get(\r\n                cntr_code=serviceOneSerializer.data[\"userCountryCode\"]).cntr_PhonePrefix,\r\n            user_Status=1)\r\n    except:\r\n        return Response({\"errId\": 8, \"errMessage\": err[7], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n    # -------------------------------------------------------------------------------------------------------------\r\n\r\n    # CHECK USER_USERTYPE\r\n    if serviceOneSerializer.data[\"userType\"] == \"CU\":\r\n        try:\r\n            CustomerModel.objects.create(cus_progr=UserModel.objects.get(\r\n                user_Mail=serviceOneSerializer.data[\"userMail\"]).user_Prog)\r\n        except:\r\n            return Response({\"errId\": 8, \"errMessage\": err[7], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    if serviceOneSerializer.data[\"userType\"] == \"CO\":\r\n        try:\r\n            CompanyModel.objects.create(comp_prog=UserModel.objects.get(\r\n                user_Mail=serviceOneSerializer.data[\"userMail\"]).user_Prog,\r\n                comp_mail=serviceOneSerializer.data[\"userMail\"])\r\n        except:\r\n            return Response({\"errId\": 8, \"errMessage\": err[7], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    if serviceOneSerializer.data[\"userType\"] == \"EX\":\r\n        try:\r\n            ExpertModel.objects.create(comp_prog=UserModel.objects.get(\r\n                exp_prog=serviceOneSerializer.data[\"userMail\"]).user_Prog,\r\n                exp_mail=serviceOneSerializer.data[\"userMail\"])\r\n        except:\r\n            return Response({\"errId\": 8, \"errMessage\": err[7], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    serviceOneSerializer.data[\"userProg\"] = UserModel.objects.get(\r\n        user_Mail=serviceOneSerializer.data[\"userMail\"]).user_Prog\r\n    try:\r\n        UserModel.objects.get(user_Mail=serviceOneSerializer.data[\"userMail\"]).update(\r\n            user_functionType=\"P\")\r\n    except:\r\n        return Response({\"errId\": 8, \"errMessage\": err[7], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    SendVerCodeSerializer.userFunctionType = 'P'\r\n    if REG007SENDVERCODE(serviceOneSerializer.data).data[\"RC\"] == 99:\r\n        return Response({\"errId\": 7, \"errMessage\": err[6], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    return Response({\"errMessage\": \"Success\", \"RC\": 0}, status=status.HTTP_200_OK)\r\n\r\n\r\ndef serviceTwo(request):\r\n    serviceTwoSerializer = ServiceTwoSerializer(data=request.data)\r\n    err = errorCodes.error_codes\r\n    if serviceTwoSerializer.is_valid() == False:\r\n        return Response({\"errId\": 2, \"errMessage\": ServiceTwoSerializer.errors}, status=status.HTTP_400_BAD_REQUEST)\r\n    if UserModel.objects.filter(user_Prog=serviceTwoSerializer.data[\"userProg\"]).exists() and UserModel.objects.get(\r\n            user_Prog=serviceTwoSerializer.data[\"userProg\"]).user_Prog != serviceTwoSerializer.data[\"userProg\"]:\r\n        return Response({\"errId\": 2, \"errMessage\": err[1], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    try:\r\n        user = UserModel.objects.get(\r\n            user_Mail=serviceTwoSerializer.data[\"userMail\"])\r\n    except:\r\n        return Response({\"errId\": 9, \"errMessage\": err[8], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    if REG008CHECKVERCODE(serviceTwoSerializer.data).data[\"RC\"] == 0:\r\n        return Response({\"errId\": 27, \"errMessage\": REG008CHECKVERCODE(serviceTwoSerializer.data).data[\"errMessage\"], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    try:\r\n        user.user_Status = 2\r\n        user.save()\r\n        return Response({\"errMessage\": \"Success\", \"RC\": 00}, status=status.HTTP_200_OK)\r\n    except:\r\n        return Response({\"errId\": 10, \"errMessage\": err[9], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\ndef serviceThree(request):\r\n    serviceThreeSerializer = ServiceThreeSerializer(data=request.data)\r\n    err = errorCodes.error_codes\r\n    if serviceThreeSerializer.is_valid() == False:\r\n        return Response({\"errId\": 1, \"errMessage\": err[0], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    try:\r\n        dbModel = UserModel.objects.get(\r\n            user_Mail=serviceThreeSerializer.data[\"userMail\"])\r\n    except:\r\n        return Response({\"errId\": 9, \"errMessage\": err[8], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    if dbModel.user_Mail != serviceThreeSerializer.data[\"userMail\"]:\r\n        return Response({\"errId\": 2, \"errMessage\": err[1], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    try:\r\n        dbModel.user_Status = 3\r\n        dbModel.user_mailStatus = \"Y\"\r\n        dbModel.user_phoneNumber = serviceThreeSerializer.data[\"phoneNumber\"]\r\n        dbModel.user_phonePrefix = serviceThreeSerializer.data[\"phonePrefix\"]\r\n        dbModel.save()\r\n    except:\r\n        return Response({\"errId\": 10, \"errMessage\": err[9], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    if serviceThreeSerializer.data[\"userType\"] == \"CU\":\r\n        customer = CustomerModel.objects.get(\r\n            cus_progr=serviceThreeSerializer.data[\"userProg\"])\r\n        try:\r\n            customer.cus_name = serviceThreeSerializer.data[\"name\"].upper()\r\n            customer.cus_surname = serviceThreeSerializer.data[\"surname\"].upper(\r\n            )\r\n            customer.cus_progr = serviceThreeSerializer.data[\"userProg\"]\r\n            customer.save()\r\n        except:\r\n            return Response({\"errId\": 8, \"errMessage\": err[7], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    if serviceThreeSerializer.data[\"userType\"] == \"CO\":\r\n        company = CompanyModel.objects.get(\r\n            comp_prog=serviceThreeSerializer.data[\"userProg\"])  # USERPROG INSTEAD OF MAIL\r\n        try:\r\n            company.comp_prog = serviceThreeSerializer.data[\"userProg\"]\r\n            company.save()\r\n        except:\r\n            return Response({\"errId\": 8, \"errMessage\": err[7], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    if serviceThreeSerializer.data[\"userType\"] == \"EX\":\r\n        expert = ExpertModel.objects.get(\r\n            exp_mail=serviceThreeSerializer.data[\"userProg\"])\r\n        try:\r\n            expert.exp_prog = serviceThreeSerializer.data[\"userProg\"]\r\n            expert.save()\r\n        except:\r\n            return Response({\"errId\": 8, \"errMessage\": err[7], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    SendVerCodeSerializer.userFunctionType = 'P'\r\n    if REG007SENDVERCODE(serviceThreeSerializer.data).data[\"RC\"] == 99:\r\n        return Response({\"errId\": 12, \"errMessage\": err[11], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    else:\r\n        return Response({\"errorMessage\": \"Success\", \"RC\": 00}, status=status.HTTP_200_OK)\r\n\r\n\r\ndef serviceFour(request):\r\n    serviceFourSerializer = ServiceFourSerializer(data=request.data)\r\n    err = errorCodes.error_codes\r\n    if serviceFourSerializer.is_valid() == False:\r\n        return Response({\"errId\": 2, \"errMessage\": err[1], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    try:\r\n        dbModel = UserModel.objects.get(\r\n            user_Mail=serviceFourSerializer.data[\"userMail\"])\r\n    except:\r\n        return Response({\"errId\": 9, \"errMessage\": err[8], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    if REG008CHECKVERCODE(serviceFourSerializer.data).data[\"RC\"] == 99:\r\n        return Response({\"errId\": 27, \"errMessage\": err[26], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    else:\r\n        try:\r\n            dbModel.user_Status = 4\r\n            dbModel.save()\r\n            return Response({\"Success\"}, status=status.HTTP_200_OK)\r\n        except:\r\n            return Response({\"errId\": 10, \"errMessage\": err[9], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\ndef serviceFive(request):\r\n    serviceFiveSerializer = ServiceFiveSerializer(data=request.data)\r\n    err = errorCodes.error_codes\r\n    if serviceFiveSerializer.is_valid() == False:\r\n        return Response({\"errId\": 2, \"errMessage\": err[1], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    try:\r\n        dbModel = UserModel.objects.get(\r\n            user_Prog=serviceFiveSerializer.data[\"userProg\"])\r\n    except:\r\n        return Response({\"errId\": 9, \"errMessage\": err[8], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    dbModel_app = UserApp.objects.get(\r\n        appID=serviceFiveSerializer.data[\"appID\"])\r\n    if dbModel_app.appID != int(serviceFiveSerializer.data[\"appID\"]):\r\n        return Response({\"errId\": 13, \"errMessage\": err[12], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    if REG002PSWMNG(serviceFiveSerializer.data).data[\"RC\"] == 99:\r\n        return Response({\"errId\": 14, \"errMessage\": err[13], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    try:\r\n        dbModel.user_Status = 5\r\n        dbModel.user_username = serviceFiveSerializer.data[\"userName\"]\r\n        dbModel.user_acceptPrivacy = serviceFiveSerializer.data[\"regAcceptPrivacy\"]\r\n        dbModel.user_acceptTermsCondition = serviceFiveSerializer.data[\"regAcceptTermsCondition\"]\r\n        dbModel.user_acceptStatistics = serviceFiveSerializer.data[\"regAcceptStatistics\"]\r\n        dbModel.save()\r\n    except:\r\n        return Response({\"errId\": 10, \"errMessage\": err[9], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    try:\r\n        dbModel_app.appID = serviceFiveSerializer.data[\"appID\"]\r\n        dbModel_app.userProg = serviceFiveSerializer.data[\"userProg\"]\r\n        dbModel_app.userStatus = 5\r\n        return Response({\"Success\"}, status=status.HTTP_200_OK)\r\n    except:\r\n        return Response({\"errId\": 8, \"errMessage\": err[7], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\ndef serviceSix(request):\r\n    serviceSixSerializer = ServiceSixSerializer(data=request.data)\r\n    err = errorCodes.error_codes\r\n    if serviceSixSerializer.is_valid() == False:\r\n        return Response({\"errId\": 1,  \"errMessage\": err[0], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    dbModel = UserModel.objects.get(\r\n        user_Mail=serviceSixSerializer.data[\"userMail\"])\r\n    if REG012CHKPROMO(serviceSixSerializer.data).data[\"RC\"] == 99:\r\n        return Response({\"errId\": 26,  \"errMessage\": err[25], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    if dbModel.user_Mail != serviceSixSerializer.data[\"userMail\"]:\r\n        return Response({\"errId\": 9,  \"errMessage\": err[8], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    if REG011IDCREATION(serviceSixSerializer.data).data[\"RC\"] == 99:\r\n        return Response({\"errId\": 16, \"errMessage\": err[15], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    try:\r\n        dbModel.user_promoCode = serviceSixSerializer.data[\"promoCode\"]\r\n        dbModel.user_userID = str(serviceSixSerializer.data[\"promoCode\"])\r\n        dbModel.save()\r\n        return Response({\"Success\"}, status=status.HTTP_200_OK)\r\n    except:\r\n        return Response({\"errId\": 10,  \"errMessage\": err[9], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\ndef serviceSeven(request):\r\n    serviceSevenSerializer = ServiceSevenSerializer(data=request.data)\r\n    err = errorCodes.error_codes\r\n    if serviceSevenSerializer.is_valid() == False:\r\n        return Response({\"errId\": 1, \"errMessage\": err[0], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    if serviceSevenSerializer.data[\"userPresenterId\"] != \"\":\r\n        if UserModel.objects.get(user_PresenterId=serviceSevenSerializer.data[\"userPresenterId\"]).user_Prog != serviceSevenSerializer.data[\"userPresenterId\"]:\r\n            return Response({\"errId\": 6, \"errMessage\": err[5], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    try:\r\n        input_user = UserModel.objects.get(\r\n            user_Prog=serviceSevenSerializer.data[\"userPresenterID\"])\r\n        presenter_country = input_user.user_CountryCode\r\n    except:\r\n        return Response({\"errId\": 9, \"errMessage\": err[8], \"RC\": 99}, status=status.HTTP_400_BAD_REQUEST)\r\n    if serviceSevenSerializer.data[\"ownerCountryCode\"] == presenter_country:\r\n        PROCSAMECOUNTRY(serviceSevenSerializer.data)\r\n    else:\r\n        PROCDIFFCOUNTRIES(serviceSevenSerializer.data)\r\n
===================================================================
diff --git a/REG001/REG001.py b/REG001/REG001.py
--- a/REG001/REG001.py	
+++ b/REG001/REG001.py	
@@ -50,7 +50,7 @@
     err = errorCodes.error_codes
     if serviceOneSerializer.is_valid() == False:
         return Response({"errId": 2, "errMessage": err[1], "RC": 99, "err": serviceOneSerializer.errors}, status=status.HTTP_400_BAD_REQUEST)
-    if UserModel.objects.filter(user_Mail=serviceOneSerializer.data["userMail"]).exists() == True:
+    if UserModel.objects.filter(user_Mail=serviceOneSerializer.data["userMail"]).exists():
         if serviceOneSerializer.data["userMail"] == UserModel.objects.get(user_Mail=serviceOneSerializer.data["userMail"]).user_Mail:
             dbModel = UserModel.objects.get(
                 user_Mail=serviceOneSerializer.data["userMail"])
